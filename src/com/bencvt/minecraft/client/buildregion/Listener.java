package com.bencvt.minecraft.client.buildregion;

import libshapedraw.event.LSDEventListener;
import libshapedraw.event.LSDGameTickEvent;
import libshapedraw.event.LSDPreRenderEvent;
import libshapedraw.event.LSDRespawnEvent;
import net.minecraft.src.Entity;
import net.minecraft.src.PlayerControllerHooks;
import net.minecraft.src.PlayerControllerHooks.PlayerControllerEventListener;

import com.bencvt.minecraft.client.buildregion.region.Direction3D;

/**
 * React to events generated by the LibShapeDraw and PlayerControllerHooks
 * APIs, passing them on to the Controller as needed.
 * 
 * @author bencvt
 */
public class Listener implements LSDEventListener, PlayerControllerEventListener {
    private final Controller controller;

    public Listener(Controller controller) {
        this.controller = controller;
    }

    @Override
    public void onRespawn(LSDRespawnEvent event) {
        controller.cmdClear(event.isNewServer());
    }

    @Override
    public void onGameTick(LSDGameTickEvent event) {
        // do nothing
    }

    @Override
    public void onPreRender(LSDPreRenderEvent event) {
        controller.updatePlayerPosition(event.getPlayerCoords());
    }

    @Override
    public boolean onBlockClick(boolean isLeftClick, int blockX, int blockY, int blockZ, int direction) {
        if (controller.getInputManager().shouldConsumeClick(isLeftClick)) {
            return false;
        }
        if (!isLeftClick && !PlayerControllerHooks.isBuildReplaceBlock(blockX, blockY, blockZ)) {
            Direction3D dir = Direction3D.fromValue(direction);
            blockX = dir.getNeighborX(blockX);
            blockY = dir.getNeighborY(blockY);
            blockZ = dir.getNeighborZ(blockZ);
        }
        boolean allow = controller.canBuild(blockX, blockY, blockZ);
        if (!allow) {
            controller.disallowedClick();
        }
        return allow;
    }

    @Override
    public boolean onBlockDamage(int blockX, int blockY, int blockZ, int direction) {
        return onBlockClick(true, blockX, blockY, blockZ, direction);
    }

    @Override
    public boolean onEntityClick(boolean isLeftClick, Entity entity) {
        return !controller.getInputManager().shouldConsumeClick(isLeftClick);
    }
}
